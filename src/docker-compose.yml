version: '3.4'

services:

  sqldata:
    image: mcr.microsoft.com/mssql/server:2017-latest 
    environment:
      - SA_PASSWORD=Pass@word
      - ACCEPT_EULA=Y
    ports:
      - "1433:1433"
    volumes:
      - cqrs-sqldata:/var/opt/mssql

  # nosqldata:
  #   image: mongo
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - cqrs-mongo-dbdata:/data/db
  
  # rabbitmq:
  #   image: rabbitmq:3-management-alpine
  #   ports:
  #   - "15672:15672"
  #   - "5672:5672"

  api:
    image: ${REGISTRY:-ordering-service}/api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Api/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - sqldata
    environment:
      - ConnectionString=Server=sqldata;Database=OrderingDb3;User Id=sa;Password=Pass@word;MultipleActiveResultSets=True

  background-task:
    image: ${REGISTRY:-ordering-service}/task:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: BackgroundTask/Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - sqldata
    environment:
      - ConnectionString=Server=sqldata;Database=OrderingDb3;User Id=sa;Password=Pass@word;MultipleActiveResultSets=True


  web:
    image: ${REGISTRY:-ordering-service}/web:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/Dockerfile
    ports:
      - "4200:80"

volumes:
  cqrs-sqldata:
    external: false
  # cqrs-mongo-dbdata:
  #   external: false

networks:
  src_default: 
    external: true